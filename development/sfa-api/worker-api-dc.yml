apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations: {}
  generation: 1
  labels:
    app: sfa-api
  name: sfa-worker-api
  namespace: {{ namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    deploymentconfig: sfa-worker-api
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      labels:
        app: sfa-api
        deploymentconfig: sfa-worker-api
    spec:
      containers:
      - name: sfa-api
        command:
          - sh
          - -c
          - gunicorn "$APP_MODULE" --bind=0.0.0.0:8080 --access-logfile=- --config "$APP_CONFIG" --max-requests $MAX_REQUESTS --max-requests-jitter $MAX_REQUESTS_JITTER
        env:
        - name: MAX_REQUESTS
          value: "30"
        - name: MAX_REQUESTS_JITTER
          value: "10"
        - name: REDOC_VERSION
          value: {{ redoc_version | default('next') }}
        - name: prometheus_multiproc_dir
          value: /tmp
        - name: APP_MODULE
          value: sfa_api:app_with_metrics
        - name: APP_CONFIG
          value: /opt/app-root/src/gunicorn_config.py
        - name: REDIS_SETTINGS
          value: '/redis/redis-config.py'
        - name: SENTRY_DSN
          value: {{ worker_sentry_dsn }}
        - name: TIMEOUT
          value: "300"
        - name: MAX_CONTENT_LENGTH
          value: "{{ 100 * 1024 * 1024 }}"
        - name: MAX_POST_DATAPOINTS
          value: "5000000"
        - name: MAX_DATA_RANGE_DAYS
          value: '7400'
        envFrom:
          - secretRef:
              name: sfa-api-mysql-config
          - secretRef:
              name: sfa-api-secrets
        image: sfa-api:{{ sfa_api_image_tag | default('latest') }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        readinessProbe:
          httpGet:
            scheme: 'HTTPS'
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 15
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /certs
          name: cert-secret
        - mountPath: /redis
          name: redis-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: cert-secret
        secret:
          defaultMode: 420
          secretName: sfa-worker-api-svc-cert
      - name: redis-config
        secret:
          defaultMode: 420
          secretName: sfa-api-redis-config
  test: false
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - sfa-api
      from:
        kind: ImageStreamTag
        name: sfa-api:{{ sfa_api_image_tag | default('latest') }}
    type: ImageChange
  - type: ConfigChange
